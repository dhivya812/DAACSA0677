import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    lists = [head for head in lists if head]
    min_heap = []
    for head in lists:
        heapq.heappush(min_heap, (head.val, head))
    dummy = ListNode()
    curr = dummy
    for _, head in heapq.merge(*min_heap):
        curr.next = head
        curr = curr.next
        if head.next:
            heapq.heappush(min_heap, (head.next.val, head.next))
    return dummy.next
def list_to_linked_list(nums):
    dummy = ListNode()
    curr = dummy
    for num in nums:
        curr.next = ListNode(num)
        curr = curr.next
    return dummy.next

def linked_list_to_list(head):
    result = []
    curr = head
    while curr:
        result.append(curr.val)
        curr = curr.next
    return result

lists = [
    list_to_linked_list([1, 4, 5]),
    list_to_linked_list([1, 3, 4]),
    list_to_linked_list([2, 6])
]

merged_list = mergeKLists(lists)
print(linked_list_to_list(merged_list)) 
# Output: [1, 1, 2, 3, 4, 4, 5, 6]
